import type { AuthArgs, AuthorizationCodeCredentials, AuthContext, Balances, BearerProfile, ClassOptions, ENV, Environment, LinkAddress, MoneriumEvent, MoneriumEventListener, NewOrder, AuthFlowOptions, Order, OrderFilter, PKCERequestArgs, Profile, SupportingDoc, Token, ClientCredentials } from './types';
export declare class MoneriumClient {
    #private;
    /**
     * @deprecated, use localStorage, will be removed in v3
     * The PKCE code verifier
     * */
    codeVerifier?: string;
    /** The bearer profile will be available after authentication, it includes the access_token and refresh_token */
    bearerProfile?: BearerProfile;
    isAuthorized: boolean;
    /** Constructor for no arguments, defaults to sandbox */
    constructor();
    /** Constructor with only env as an argument*/
    constructor(env: ENV);
    /** Constructor with {@link ClassOptions} */
    constructor(options: ClassOptions);
    /**
     * Construct the url to the authorization code flow,
     * Code Verifier needed for the code challenge is stored in local storage
     * For automatic wallet link, add the following properties: `address`, `signature` & `chainId`
     * @returns string
     * {@link https://monerium.dev/api-docs#operation/auth}
     */
    authorize(client?: AuthFlowOptions): Promise<void>;
    /**
     * Get access to the API
     * @param {AuthorizationCodeCredentials | ClientCredentials} client - the client credentials
     * @returns boolean to indicate if access has been granted
     */
    getAccess(client?: AuthorizationCodeCredentials | ClientCredentials): Promise<boolean>;
    /**
     * {@link https://monerium.dev/api-docs#operation/auth-context}
     */
    getAuthContext(): Promise<AuthContext>;
    /**
     * {@link https://monerium.dev/api-docs#operation/profile}
     * @param {string} profileId - the id of the profile to fetch.
  
     */
    getProfile(profileId: string): Promise<Profile>;
    /**
     * {@link https://monerium.dev/api-docs#operation/profile-balances}
     * @param {string=} profileId - the id of the profile to fetch balances.
     */
    getBalances(profileId?: string): Promise<Balances[]>;
    /**
     * {@link https://monerium.dev/api-docs#operation/orders}
     */
    getOrders(filter?: OrderFilter): Promise<Order[]>;
    /**
     * {@link https://monerium.dev/api-docs#operation/order}
     */
    getOrder(orderId: string): Promise<Order>;
    /**
     * {@link https://monerium.dev/api-docs#operation/tokens}
     */
    getTokens(): Promise<Token[]>;
    /**
     * {@link https://monerium.dev/api-docs#operation/profile-addresses}
     */
    linkAddress(profileId: string, body: LinkAddress): Promise<unknown>;
    /**
     * {@link https://monerium.dev/api-docs#operation/post-orders}
     */
    placeOrder(order: NewOrder, profileId?: string): Promise<Order>;
    /**
     * {@link https://monerium.dev/api-docs#operation/supporting-document}
     */
    uploadSupportingDocument(document: File): Promise<SupportingDoc>;
    connectOrderSocket(): Promise<void>;
    subscribeToOrderNotifications: () => WebSocket;
    /**
     * Cleanups the socket and the subscriptions
     */
    disconnect(): Promise<void>;
    /**
     * Revokes access
     */
    revokeAccess(): Promise<void>;
    /**
     * Subscribe to MoneriumEvent to receive notifications using the Monerium API (WebSocket)
     * We are setting a subscription map because we need the user to have a token to start the WebSocket connection
     * {@link https://monerium.dev/api-docs#operation/profile-orders-notifications}
     * @param event The event to subscribe to
     * @param handler The handler to be called when the event is triggered
     */
    subscribeOrders(event: MoneriumEvent, handler: MoneriumEventListener): void;
    /**
     * Unsubscribe from MoneriumEvent and close the socket if there are no more subscriptions
     * @param event The event to unsubscribe from
     */
    unsubscribeOrders(event: MoneriumEvent): void;
    /**
     * @deprecated since v2.6.4, will be removed in 2.7.2+, use {@link getAccess} instead.
     */
    auth: (args: AuthArgs) => Promise<BearerProfile>;
    /**
     * @deprecated since v2.7.1, will be removed in 2.7.2+, use {@link getAccess} instead.
     */
    connect: (args: AuthArgs) => Promise<BearerProfile>;
    /**
     * @deprecated since v2.6.4, will be removed in 2.7.2+, use {@link authorize} instead.
     */
    getAuthFlowURI: (args: PKCERequestArgs) => string;
    /**
     *  @deprecated since v2.0.7, will be removed in 2.7.2+, use {@link getAuthFlowURI} instead.
     */
    pkceRequest: (args: PKCERequestArgs) => string;
    getEnvironment: () => Environment;
}
