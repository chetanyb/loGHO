import { AuthArgs, AuthCodeRequest, ClientCredentialsRequest, PKCERequestArgs, RefreshTokenRequest } from '../types';
/** Structure the Auth Flow params, support for ChainId instead of chain & network */
export declare const getAuthFlowParams: (args: PKCERequestArgs, codeChallenge: string) => string | undefined;
/**
 * Find a more secure way to generate a random string
 * Using crypto-js to generate a random string was causing the following error:
 * `Error: Native crypto module could not be used to get secure random number.`
 * https://github.com/brix/crypto-js/issues/256
 */
export declare const generateRandomString: () => string;
/** Generate the PKCE code challenge */
export declare const generateCodeChallenge: (codeVerifier: string) => string;
/**
 * Constructs the Auth Flow URL and stores the code verifier in the local storage
 */
export declare const getAuthFlowUrlAndStoreCodeVerifier: (baseUrl: string, args: PKCERequestArgs) => string;
/**
 * Clean the query string from the URL
 */
export declare const cleanQueryString: () => void;
export declare const isAuthCode: (args: AuthArgs) => args is AuthCodeRequest;
export declare const isRefreshToken: (args: AuthArgs) => args is RefreshTokenRequest;
export declare const isClientCredentials: (args: AuthArgs) => args is ClientCredentialsRequest;
